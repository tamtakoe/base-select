export declare abstract class SelectDom {
    paramsDefault: any;
    params: any;
    selectedItems: any[];
    elem: any;
    tmpl: any;
    isOpen: boolean;
    isFocused: boolean;
    isLoading: boolean;
    isRemovable: boolean;
    isEmpty: boolean;
    isDisabled: boolean;
    isReadonly: boolean;
    isDropdownAbove: boolean;
    activeListElement: any;
    activeSelectedElement: any;
    unbindFocusBlur: (item?: any) => void;
    focusBlurInstance: any;
    abstract searchChange(value: any): void;
    abstract searchKeydown(e: any): void;
    abstract selectedItemClick(element: any, isRemoveButton?: any): void;
    abstract listItemClick(element: any): void;
    abstract inputFieldClick(): void;
    constructor(element: any, style?: any);
    bindInput(inputElement?: any): void;
    addListeners(): void;
    removeListeners(): void;
    blinkRestriction(): void;
    setDropdownAbove(isDropdownAbove: boolean): void;
    setFocus(isFocus: boolean): void;
    setLoading(isLoading: boolean): void;
    setElementLoading(element: any, isLoading: any): void;
    setRemovable(isRemovable: boolean): void;
    setElementDisabled(element: any, isDisabled: boolean): void;
    isElementDisabled(element: any): any;
    setDisabled(isDisabled: boolean): void;
    setReadonly(isReadonly: boolean): void;
    openList(): void;
    closeList(): void;
    updatePlaceholder(): void;
    setPlaceholder(text?: string): void;
    setInputInfo(text?: string): void;
    updateInputInfo(): void;
    setDropdownLabel(tmpl?: string): void;
    setEmpty(isEmpty: boolean): void;
    setQuery(text?: string, selectAll?: boolean): void;
    getQuery(): any;
    isListElementSelected(element: any): any;
    setListElementSelected(element: any): any;
    unsetListElementSelected(element: any): any;
    focus(): void;
    blur(): void;
    setMultiple(isMultiple: boolean): void;
    getSelectedItemElementByItem(item: any): unknown;
    getListElementByItem(item: any): any;
    updateLabel(element: any, labelGetter: any, item: any, query?: any, extraLabelElement?: any): any;
    createListItemsGroupElement(groupName: any): any;
    createListItemElement(item: any): any;
    createSelectedItemElement(item: any): any;
    postRenderSelectedElements(): void;
    insertSelectedElements(items?: any[]): void;
    insertSelectedElement(item: any): void;
    removeElement(element: any): void;
    insertListItems(items?: any[], query?: string): any;
    insertCustomArea(): void;
    setActiveSelectedElement(element?: any): void;
    setActiveListElement(element?: any): void;
    setFirstActiveListElement(): void;
    setNextActiveListElement(isPrevious?: boolean, parentNode?: any): void;
    setPreviousActiveListElement(): void;
    getSiblingElement(element: any, isPrevious?: boolean): any;
    getFirstListElement(): any;
    getLastListElement(): any;
    findFirstChildElementWithData(containerElement: any, invert?: boolean): any;
    findLastChildElementWithData(containerElement: any): any;
    isDataElement(element: any): boolean;
    searchFocusHandler: () => void;
    searchBlurHandler: () => void;
    searchInputHandler: (e: any) => void;
    searchKeydownHandler: (e: any) => void;
    searchContainerClickHandler: (e: any) => void;
    listItemClickHandler: (e: any) => void;
    listItemMousemoveHandler: (e: any) => void;
    stopImmediatePropagation: (e: any) => any;
}
